// Generated by CoffeeScript 1.6.2
var Plotter;

Plotter = (function() {
  function Plotter(svg, r, pad, left_pad) {
    this.svg = svg != null ? svg : d3.select("svg");
    this.r = r != null ? r : 3;
    this.pad = pad != null ? pad : 40;
    this.left_pad = left_pad != null ? left_pad : 60;
    this.w = $("svg").width();
    this.h = $("svg").height();
  }

  Plotter.prototype.plot = function(metric1, metric2) {
    var _this = this;

    return $.when($.getJSON("/metrics/get?name=" + metric1), $.getJSON("/metrics/get?name=" + metric2)).done(function(data1, data2) {
      return _this.plotData(data1[0], data2[0], metric1, metric2);
    });
  };

  Plotter.prototype.plotData = function(data1, data2, metric1, metric2) {
    var data, g_objs, k, v, values, xaxis, xscale, y_title_ypos, yaxis, yscale,
      _this = this;

    data = this.mergeData(data1, data2);
    values = (function() {
      var _results;

      _results = [];
      for (k in data) {
        v = data[k];
        _results.push([k, v[0], v[1]]);
      }
      return _results;
    })();
    xscale = d3.scale.linear().domain([
      0, d3.max(values, function(d) {
        return d[1];
      })
    ]).range([this.left_pad, this.w - this.pad]).nice();
    xaxis = d3.svg.axis().scale(xscale).orient("bottom");
    yscale = d3.scale.linear().domain([
      0, d3.max(values, function(d) {
        return d[2];
      })
    ]).range([this.h - this.pad, this.pad]).nice();
    yaxis = d3.svg.axis().scale(yscale).orient("left");
    this.svg.append("g").attr('transform', "translate(0," + (this.h - this.pad) + ")").attr("class", "axis").call(xaxis);
    this.svg.append("g").attr('transform', "translate(" + this.left_pad + ",0)").attr("class", "axis").call(yaxis);
    this.svg.append("text").text(metric1).attr("class", "xlabel").attr("x", Math.round(this.w / 2)).attr("y", this.h - 8);
    y_title_ypos = Math.round(this.h / 2);
    this.svg.append("text").text(metric2).attr("class", "ylabel").attr("transform", "rotate(270, 20, " + y_title_ypos + ")").attr("x", 20).attr("y", y_title_ypos);
    g_objs = this.svg.selectAll("g.circ").data(values).enter().append("g").attr("class", "circ");
    g_objs.append("circle").attr("r", this.r).attr("cx", function(d) {
      return xscale(d[1]);
    }).attr("cy", function(d) {
      return yscale(d[2]);
    });
    return g_objs.append("text").text(function(d) {
      return d[0];
    }).attr("text-anchor", "middle").attr("x", function(d) {
      return xscale(d[1]);
    }).attr("y", function(d) {
      return yscale(d[2]) - _this.r - 3;
    });
  };

  Plotter.prototype.mergeData = function(data1, data2) {
    var k, ret, v, v2;

    ret = {};
    for (k in data1) {
      v = data1[k];
      if (v === null) {
        continue;
      }
      v2 = data2[k];
      if (v2 != null) {
        ret[k] = [v, v2];
      }
    }
    return ret;
  };

  return Plotter;

})();

$(function() {
  var hash, params, plotter;

  hash = document.location.hash || "#";
  params = hash.substr(1).split(",");
  if (params[0] && params[1]) {
    plotter = new Plotter();
    return plotter.plot(params[0], params[1]);
  }
});
